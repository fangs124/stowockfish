#![allow(dead_code)]
#![allow(unused_imports)]
mod bitboard;
mod chessboard;
mod chessmove;
use std::io;
use std::io::BufRead;
use std::io::BufReader;
use std::io::BufWriter;
use std::io::Write;
use std::time::Instant;

use crate::bitboard::*;
use crate::chessboard::*;
use crate::chessmove::*;
use rand::Rng;

/* crappy global variables */

pub const DEBUG: bool = false;

/* custom position for webperft */
#[rustfmt::skip]
pub const KIWIPETE: [BB; 12] = [
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00001000}, // ♔
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000100_00000000_00000000}, // ♕
    BB { data: 0b00000000_00000000_00000000_00001000_00000000_00100000_00000000_00000000}, // ♘
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00011000_00000000}, // ♗
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_10000001}, // ♖
    BB { data: 0b00000000_00000000_00000000_00010000_00001000_00000000_11100111_00000000}, // ♙
    BB { data: 0b00001000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♚
    BB { data: 0b00000000_00001000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♛
    BB { data: 0b00000000_00000000_01000100_00000000_00000000_00000000_00000000_00000000}, // ♞
    BB { data: 0b00000000_00000010_10000000_00000000_00000000_00000000_00000000_00000000}, // ♝
    BB { data: 0b10000001_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♜
    BB { data: 0b00000000_10110100_00001010_00000000_01000000_00000001_00000000_00000000}, // ♟
];

#[rustfmt::skip]
pub const POS3: [BB; 12] = [
    BB { data: 0b00000000_00000000_00000000_10000000_00000000_00000000_00000000_00000000}, // ♔
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♕
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♘
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♗
    BB { data: 0b00000000_00000000_00000000_00000000_01000000_00000000_00000000_00000000}, // ♖
    BB { data: 0b00000000_00000000_00000000_01000000_00000000_00000000_00001010_00000000}, // ♙
    BB { data: 0b00000000_00000000_00000000_00000000_00000001_00000000_00000000_00000000}, // ♚
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♛
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♞
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♝
    BB { data: 0b00000000_00000000_00000000_00000001_00000000_00000000_00000000_00000000}, // ♜
    BB { data: 0b00000000_00100000_00010000_00000000_00000100_00000000_00000000_00000000}, // ♟
];
pub const POS3_CASTLE: [bool; 4] = [false, false, false, false];

#[rustfmt::skip]
pub const POS4: [BB; 12] = [
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000010}, // ♔
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00010000}, // ♕
    BB { data: 0b00000000_00000000_00000001_00000000_00000000_00000100_00000000_00000000}, // ♘
    BB { data: 0b00000000_00000000_00000000_00000000_11000000_00000000_00000000_00000000}, // ♗
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_10000100}, // ♖
    BB { data: 0b00000000_10000000_00000000_01000000_00101000_00000000_10010011_00000000}, // ♙
    BB { data: 0b00001000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♚
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_10000000_00000000_00000000}, // ♛
    BB { data: 0b00000000_00000000_00000100_10000000_00000000_00000000_00000000_00000000}, // ♞
    BB { data: 0b00000000_00000000_01000010_00000000_00000000_00000000_00000000_00000000}, // ♝
    BB { data: 0b10000001_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♜
    BB { data: 0b00000000_01110111_00000000_00000000_00000000_00000000_01000000_00000000}, // ♟
];
pub const POS4_CASTLE: [bool; 4] = [false, false, true, true];
pub const POS4_CHECK_BB: BB =
    BB { data: 0b00000000_00000000_01000000_00000000_00000000_00000000_00000000_00000000 }; // ♙

#[rustfmt::skip]
pub const POS5: [BB; 12] = [
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00001000}, // ♔
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00010000}, // ♕
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00001000_01000000}, // ♘
    BB { data: 0b00000000_00000000_00000000_00000000_00100000_00000000_00000000_00100000}, // ♗
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_10000001}, // ♖
    BB { data: 0b00000000_00010000_00000000_00000000_00000000_00000000_11100011_00000000}, // ♙
    BB { data: 0b00000100_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♚
    BB { data: 0b00010000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♛
    BB { data: 0b01000000_00000000_00000000_00000000_00000000_00000000_00000100_00000000}, // ♞
    BB { data: 0b00100000_00001000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♝
    BB { data: 0b10000001_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♜
    BB { data: 0b00000000_11000111_00100000_00000000_00000000_00000000_00000000_00000000}, // ♟
];
pub const POS5_CASTLE: [bool; 4] = [true, true, false, false];
#[rustfmt::skip]
pub const POS6: [BB; 12] = [
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00001000}, // ♔
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00010000}, // ♕
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00001000_01000000}, // ♘
    BB { data: 0b00000000_00000000_00000000_00000000_00100000_00000000_00000000_00100000}, // ♗
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_10000001}, // ♖
    BB { data: 0b00000000_00010000_00000000_00000000_00000000_00000000_11100011_00000000}, // ♙
    BB { data: 0b00001000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♚
    BB { data: 0b00010000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♛
    BB { data: 0b01000000_00000000_00000000_00000000_00000000_00000000_00000100_00000000}, // ♞
    BB { data: 0b00100000_00001000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♝
    BB { data: 0b10000001_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♜
    BB { data: 0b00000000_11000111_00100000_00000000_00000000_00000000_00000000_00000000}, // ♟
];

#[rustfmt::skip]
pub const POS0: [BB; 12] = [
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♔
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♕
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♘
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♗
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♖
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♙
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♚
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♛
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♞
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♝
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♜
    BB { data: 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000}, // ♟
];

fn main() -> io::Result<()> {
    let mut chessboard = ChessBoard::default();
    uci_loop(&mut chessboard)
}

const TEST_FEN: &str = "rnbqkb1r/pp1p1pPp/8/2p1pP2/1P1P4/3P3P/P1P1P3/RNBQKBNR w KQkq e6 0 1";
const TEST_FEN2: &str = "4k3/pppppppp/8/8/8/8/PPPPPPPP/4K3 w - - 0 1";

pub fn uci_loop(chessboard: &mut ChessBoard) -> io::Result<()> {
    let mut reader = BufReader::new(io::stdin());
    let mut buffer = String::with_capacity(1 << 11);
    while let Ok(count) = reader.read_line(&mut buffer) {
        if DEBUG {
            print!("buffer:{}", buffer);
        }

        if count == 0 {
            return Ok(());
        }

        let mut cmds = buffer.split_whitespace();
        match cmds.next() {
            Some("isready") => println!("readyok"),
            Some("position") => {
                chessboard.parse_uci_position_cmd(cmds.collect::<Vec<&str>>().join(" ").as_str())
            }
            Some("ucinewgame") => _ = chessboard.parse_uci_go_cmd("startpos"),
            Some("go") => println!(
                "{}",
                chessboard.parse_uci_go_cmd(cmds.collect::<Vec<&str>>().join(" ").as_str())
            ),
            Some("quit") => return Ok(()),
            Some("uci") => {
                // print engine info
                println!("id name Stowockfish/PawnPusher");
                println!("id name Fangs");
                println!("uciok");
            }
            _ => {} //???
        }
        buffer.clear();
    }

    return Ok(());
}
